{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cognitive Tasks for Expyriment # This is a battery of cognitive tasks for expyriment , which is a python library for cognitive and neuroscientific experiments. At the moment the following tasks are available: Simple Reaction Time Task Visual N-Back Task Trail Making Task Digit Span Task All tasks as well as logged output can be configured and customised , and the experiments can be translated . Tasks can be used freely for all purposes, as long as you maintain a copyright notice in re-distributions and modificatios of this software, and cite the author in any scientific publications, as described here . If you just want to get started, download the latest collection of experiments from here .","title":"Home"},{"location":"#cognitive-tasks-for-expyriment","text":"This is a battery of cognitive tasks for expyriment , which is a python library for cognitive and neuroscientific experiments. At the moment the following tasks are available: Simple Reaction Time Task Visual N-Back Task Trail Making Task Digit Span Task All tasks as well as logged output can be configured and customised , and the experiments can be translated . Tasks can be used freely for all purposes, as long as you maintain a copyright notice in re-distributions and modificatios of this software, and cite the author in any scientific publications, as described here . If you just want to get started, download the latest collection of experiments from here .","title":"Cognitive Tasks for Expyriment"},{"location":"about/release-notes/","text":"Release Notes # 0.1.2 (2018-12-24) # The ConfigParser class was replaced with a custom class as this was not available on the Android app. Furthermore some bugs regarding python2/3 compatibility were fixed. 0.1.1 (2018-11-30) # Four tasks added: Simple Reaction Time Task N-Back Task Trailmaking Task Digit Span Task Plus a boilerplate for more experiments. Currently, there are no tutorials or practice sessions implemented. Add a DOI via zenodo .","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#012-2018-12-24","text":"The ConfigParser class was replaced with a custom class as this was not available on the Android app. Furthermore some bugs regarding python2/3 compatibility were fixed.","title":"0.1.2 (2018-12-24)"},{"location":"about/release-notes/#011-2018-11-30","text":"Four tasks added: Simple Reaction Time Task N-Back Task Trailmaking Task Digit Span Task Plus a boilerplate for more experiments. Currently, there are no tutorials or practice sessions implemented. Add a DOI via zenodo .","title":"0.1.1 (2018-11-30)"},{"location":"about/using-and-citing/","text":"Using and Citing these Experiments # All experiments found on this website as well as the website contents itself have been licensed under the MIT License, as is expyriment on which this battery builds on. This license is further explained here . Please make sure to cite this and other works appropriately. Particularly, you should cite expyriment : Krause, F. & Lindemann, O. (2014). Expyriment: A Python library for cognitive and neuroscientific experiments. Behavior Research Methods, 46(2), 416-428. doi:10.3758/s13428-013-0390-6 . Unless otherwise indicated in the respective experiment, please cite if you have used experiments from this collection: NOTE: please revisit this site in a few weeks or contact the author if it is urgent.","title":"Using and Citing"},{"location":"about/using-and-citing/#using-and-citing-these-experiments","text":"All experiments found on this website as well as the website contents itself have been licensed under the MIT License, as is expyriment on which this battery builds on. This license is further explained here . Please make sure to cite this and other works appropriately. Particularly, you should cite expyriment : Krause, F. & Lindemann, O. (2014). Expyriment: A Python library for cognitive and neuroscientific experiments. Behavior Research Methods, 46(2), 416-428. doi:10.3758/s13428-013-0390-6 . Unless otherwise indicated in the respective experiment, please cite if you have used experiments from this collection: NOTE: please revisit this site in a few weeks or contact the author if it is urgent.","title":"Using and Citing these Experiments"},{"location":"howto/configuration/","text":"Configuring the Experiments # Each experiment has one configuration file and one translation included. These files can be modified to suit the demands of your research group on the experiment. After each change of configuration, please make sure to test the experiments, as some values or missing configuration options might cause the experiment to crash. Each config.conf is built up from a number of sections, of which the sections [GENERAL] , [DESIGN] , and [LOG] are mandatory and the others are optional. In the following sections, the purpose and generic use of each of these sections is described. [GENERAL] # This is the general configuration for this experiment. Required options for each experiment: # sets the language of the experiment to (in this case) English # or any other language code specified in i18n.conf; for detailed # information see the instructions on translating [required] language = en # defines whether the experiment requires a session id on top of # a participant id; it will be automatically logged to all # outputs and will be visible in the filenames of individual # experiment outputs [required] log_session = yes Optional options for each experiment in this section. # window size of the experiment, implies windowed mode as opposed # to fullscreen; on android the experiment will still run in full # screen but with less resolution [no default; e.g. 800, 600] window_size = # the following DPI settings are suggested to be set if you # use mm, cm, or in to describe dimensions # DPI is estimated in this order by # (1) set dpi [no default] dpi = # (2) on android devices the DPI is read from the device # (3) calculating the DPI by using window_size and # screen_diagonal [no default; only works in full screen mode] # [can be set in in or cm, e.g. 13.3in, 50cm] screen_diagonal = # (4) a fallback DPI when no device DPI could be identified fallback_dpi = 96 Notes on window_size : On old android devices you might encounter issues with performance. To maintain the right sizes of stimuli, make sure to set the dpi yourself or to supply a value for screen_diagonal . Also make sure to reduce the screen size proportionally, as boundaries are cropped; so supplying a 16:10 window size to a 4:3 screen will not utilise the whole window and might result in unexpected results. [DESIGN] # The design section includes information about the general design of the experiment, such as the number of blocks or trials. Information on the configuration settings are available in the respective documentation on each experiment. [APPEARANCE] # The appearance section includes information about the general appearance of the experiment, including colours or font sizes. Information on experiment specific configuration settings are available in the respective documentation on each experiment. [LOG] # In this section it is defined what variables should be logged and to which files they are logged, see here for detailed information. [DEVELOPMENT] # This section is intended for development or exploration purposes. active = (yes|no) allows to enable expyriment\u2019s development mode which will among others reduce waiting times, screen size, and to run the experiment in a window; only if this is enabled do any of the further settings have effect log_all_variables = FILENAME.csv : If this setting is present, all variables computed by the experiment are logged in alphabetical order for every trial to the file specified. This setting is useful for debug purposes.","title":"Configuration"},{"location":"howto/configuration/#configuring-the-experiments","text":"Each experiment has one configuration file and one translation included. These files can be modified to suit the demands of your research group on the experiment. After each change of configuration, please make sure to test the experiments, as some values or missing configuration options might cause the experiment to crash. Each config.conf is built up from a number of sections, of which the sections [GENERAL] , [DESIGN] , and [LOG] are mandatory and the others are optional. In the following sections, the purpose and generic use of each of these sections is described.","title":"Configuring the Experiments"},{"location":"howto/configuration/#general","text":"This is the general configuration for this experiment. Required options for each experiment: # sets the language of the experiment to (in this case) English # or any other language code specified in i18n.conf; for detailed # information see the instructions on translating [required] language = en # defines whether the experiment requires a session id on top of # a participant id; it will be automatically logged to all # outputs and will be visible in the filenames of individual # experiment outputs [required] log_session = yes Optional options for each experiment in this section. # window size of the experiment, implies windowed mode as opposed # to fullscreen; on android the experiment will still run in full # screen but with less resolution [no default; e.g. 800, 600] window_size = # the following DPI settings are suggested to be set if you # use mm, cm, or in to describe dimensions # DPI is estimated in this order by # (1) set dpi [no default] dpi = # (2) on android devices the DPI is read from the device # (3) calculating the DPI by using window_size and # screen_diagonal [no default; only works in full screen mode] # [can be set in in or cm, e.g. 13.3in, 50cm] screen_diagonal = # (4) a fallback DPI when no device DPI could be identified fallback_dpi = 96 Notes on window_size : On old android devices you might encounter issues with performance. To maintain the right sizes of stimuli, make sure to set the dpi yourself or to supply a value for screen_diagonal . Also make sure to reduce the screen size proportionally, as boundaries are cropped; so supplying a 16:10 window size to a 4:3 screen will not utilise the whole window and might result in unexpected results.","title":"[GENERAL]"},{"location":"howto/configuration/#design","text":"The design section includes information about the general design of the experiment, such as the number of blocks or trials. Information on the configuration settings are available in the respective documentation on each experiment.","title":"[DESIGN]"},{"location":"howto/configuration/#appearance","text":"The appearance section includes information about the general appearance of the experiment, including colours or font sizes. Information on experiment specific configuration settings are available in the respective documentation on each experiment.","title":"[APPEARANCE]"},{"location":"howto/configuration/#log","text":"In this section it is defined what variables should be logged and to which files they are logged, see here for detailed information.","title":"[LOG]"},{"location":"howto/configuration/#development","text":"This section is intended for development or exploration purposes. active = (yes|no) allows to enable expyriment\u2019s development mode which will among others reduce waiting times, screen size, and to run the experiment in a window; only if this is enabled do any of the further settings have effect log_all_variables = FILENAME.csv : If this setting is present, all variables computed by the experiment are logged in alphabetical order for every trial to the file specified. This setting is useful for debug purposes.","title":"[DEVELOPMENT]"},{"location":"howto/developing/","text":"Develop or Modify Experiments # If you would like to program your own experiments using expyriment, the best way to start is their tutorial . All experiments you can find here follow this basic functionality. If you merely want to change the look and feel, or edit some configurations, you might also want to check the individual documentation, whether your desired functionality is already implemented. All experiments you find here, can be executed with expyriment 0.7 (which is currently used in the android application) and expyriment 0.9 (which is the most recent version of expyriment). To achieve this, and to further streamline these experiments you can find here, a few extra functions were added or existing expyriment functions were modified. The released versions of the experiments have this functionality included in the same python file; if you wish to change or modify experiments, I suggest to use the files from the repository as this would be easier. You are welcome to suggest changes and make amendments to the functionality provided here!","title":"Developing or Modifying"},{"location":"howto/developing/#develop-or-modify-experiments","text":"If you would like to program your own experiments using expyriment, the best way to start is their tutorial . All experiments you can find here follow this basic functionality. If you merely want to change the look and feel, or edit some configurations, you might also want to check the individual documentation, whether your desired functionality is already implemented. All experiments you find here, can be executed with expyriment 0.7 (which is currently used in the android application) and expyriment 0.9 (which is the most recent version of expyriment). To achieve this, and to further streamline these experiments you can find here, a few extra functions were added or existing expyriment functions were modified. The released versions of the experiments have this functionality included in the same python file; if you wish to change or modify experiments, I suggest to use the files from the repository as this would be easier. You are welcome to suggest changes and make amendments to the functionality provided here!","title":"Develop or Modify Experiments"},{"location":"howto/install/","text":"Installing the Experiments # Setting up Expyriment # Firstly to use any of the experiments provided here, you need to have python installed and running on your computer, and then you need to install expyriment as explained here . On an Android Device # Expyriment has a dedicated Android application which can be obtained from here , which also contains instructions on how to install/start experiments. However, I recommend to use a recent recompilation of the Android application which I have made that can be downloaded from here ; it differs particularly in the size of that start menu, which in the original distribution is very small as it was made when android devices still largely had low DPI screens. Note that this is not an officially supported version of the expyriment app for android. Preparing the Experiments # To use experiments, download from the release page of this repository , extract the folder where you want it to be, configure the config.conf and test the experiment a few times to make sure everything works. On android devices, you need to put them in a folder called expyriment on the root of your internal or external storage, for example in the folder ...sd-card/expyriment/digitspan/ . Starting Experiments # To run the experiment, you may be able to double click it on Windows, but otherwise you can open a command line and use a command such as python C:\\path\\to\\the\\experiment.py should work on all platforms. On android you start the expyriment app an should be able to select the experiment.","title":"Installation"},{"location":"howto/install/#installing-the-experiments","text":"","title":"Installing the Experiments"},{"location":"howto/install/#setting-up-expyriment","text":"Firstly to use any of the experiments provided here, you need to have python installed and running on your computer, and then you need to install expyriment as explained here .","title":"Setting up Expyriment"},{"location":"howto/install/#on-an-android-device","text":"Expyriment has a dedicated Android application which can be obtained from here , which also contains instructions on how to install/start experiments. However, I recommend to use a recent recompilation of the Android application which I have made that can be downloaded from here ; it differs particularly in the size of that start menu, which in the original distribution is very small as it was made when android devices still largely had low DPI screens. Note that this is not an officially supported version of the expyriment app for android.","title":"On an Android Device"},{"location":"howto/install/#preparing-the-experiments","text":"To use experiments, download from the release page of this repository , extract the folder where you want it to be, configure the config.conf and test the experiment a few times to make sure everything works. On android devices, you need to put them in a folder called expyriment on the root of your internal or external storage, for example in the folder ...sd-card/expyriment/digitspan/ .","title":"Preparing the Experiments"},{"location":"howto/install/#starting-experiments","text":"To run the experiment, you may be able to double click it on Windows, but otherwise you can open a command line and use a command such as python C:\\path\\to\\the\\experiment.py should work on all platforms. On android you start the expyriment app an should be able to select the experiment.","title":"Starting Experiments"},{"location":"howto/logs/","text":"Logging Experimental Outputs # The [LOG] section in every experiment configuration file sets the column names and desired variables for logging. There is three different output files which can be enabled or disabled as desired: (1) trial-by-trial outputs for individual sessions; (2) a summary file recording summaries of experiment blocks; (3) a summary file recording summaries of the whole session. By default, subject and session ids are logged to every output file, block id to (1) and (2), and trial id in (1). There is two configuration fields per output, one defining the column names and variables ( cols_* ), the other one the file name ( *_file_name ). An output is disabled if the output columns or the output file are commented (i.e. preceded by a # ); only when both are present are they enabled. Note that the file name of the trial-by-trial log differs per participant as each participant\u2019s data is logged separately. Defining Log Fields # Variables # Every experiment has its own set of available variables which are listed in the respective config file, and are further described in the respective documentation for the experiment. Aggregation # In the block and experiment output, the values can be aggregated or pre-computed by using aggregation functions. They combine all previously logged data into one output value. For example to get the average length of a sequence you could use mean(sequence_length) , or to get the number of correct trials, or the average length of incorrect trials mean(sequence_length[correct!=True]) . The following functions are provided: len : number of recorded answers, e.g. correct ones max , min : maximum or minimum value mean , avg , sum : mean/average, sum of a list of numbers sd , var : standard deviation and variance of a list of numbers Further, for individual values, the functions abs for the absolute value, and len for the length of a string, such as the user_input, can be used. Note that as of now, functions cannot be nested or combined, so none of the following examples would work: mean(len(sequence)) , mean(similarity) - sd(similarity) Filters # Sometimes in aggregation, one only wants to count specific items, which is why there are some filters provided, that can be applied in square brackets. Currently, three modes of filtering are implemented: abc(xyz[field]) : to filter for non-False/non-empty items in field abc(xyz[correct==True]) or abc(xyz[sequence_length==5]) : to filter for correct items (True) or those of length 5 abc(xyz[correct!=True]) or abc(xyz[sequence_length!=5]) : to filter for incorrect items (not True) or those other than length five","title":"Creating Logs"},{"location":"howto/logs/#logging-experimental-outputs","text":"The [LOG] section in every experiment configuration file sets the column names and desired variables for logging. There is three different output files which can be enabled or disabled as desired: (1) trial-by-trial outputs for individual sessions; (2) a summary file recording summaries of experiment blocks; (3) a summary file recording summaries of the whole session. By default, subject and session ids are logged to every output file, block id to (1) and (2), and trial id in (1). There is two configuration fields per output, one defining the column names and variables ( cols_* ), the other one the file name ( *_file_name ). An output is disabled if the output columns or the output file are commented (i.e. preceded by a # ); only when both are present are they enabled. Note that the file name of the trial-by-trial log differs per participant as each participant\u2019s data is logged separately.","title":"Logging Experimental Outputs"},{"location":"howto/logs/#defining-log-fields","text":"","title":"Defining Log Fields"},{"location":"howto/logs/#variables","text":"Every experiment has its own set of available variables which are listed in the respective config file, and are further described in the respective documentation for the experiment.","title":"Variables"},{"location":"howto/logs/#aggregation","text":"In the block and experiment output, the values can be aggregated or pre-computed by using aggregation functions. They combine all previously logged data into one output value. For example to get the average length of a sequence you could use mean(sequence_length) , or to get the number of correct trials, or the average length of incorrect trials mean(sequence_length[correct!=True]) . The following functions are provided: len : number of recorded answers, e.g. correct ones max , min : maximum or minimum value mean , avg , sum : mean/average, sum of a list of numbers sd , var : standard deviation and variance of a list of numbers Further, for individual values, the functions abs for the absolute value, and len for the length of a string, such as the user_input, can be used. Note that as of now, functions cannot be nested or combined, so none of the following examples would work: mean(len(sequence)) , mean(similarity) - sd(similarity)","title":"Aggregation"},{"location":"howto/logs/#filters","text":"Sometimes in aggregation, one only wants to count specific items, which is why there are some filters provided, that can be applied in square brackets. Currently, three modes of filtering are implemented: abc(xyz[field]) : to filter for non-False/non-empty items in field abc(xyz[correct==True]) or abc(xyz[sequence_length==5]) : to filter for correct items (True) or those of length 5 abc(xyz[correct!=True]) or abc(xyz[sequence_length!=5]) : to filter for incorrect items (not True) or those other than length five","title":"Filters"},{"location":"howto/translations/","text":"Translating Experiments # If you would like to use experiments in a different language or change the display messages, look at the i18n.conf file distributed with each experiment. Each block denoted by square brackets corresponds to one language, the [en] block has English instructions and is the default. If you would like to change the language of your experiment, please make sure the language is available in the i18n.conf and adjust the language = value in the [GENERAL] section of the configuration file config.conf to the name of that block (e.g. language = en for English). Changing Instructions # In case you would like to change any instructions, make sure to preserve the message keys (i.e. the part before the = -sign) and only change what is written afterwards. If you would like to add an instruction where there is currently none, please add an issue on GitHub; if you would like to remove an instruction completely, please use the value SKIP (e.g. thanks = SKIP ) but do not delete it. Adding a Translation # To add a translation to an existing experiment, please copy the whole [en] -section in i18n.conf within the same file, and change the block name in brackets to the language code of your translation. Then you can translate all items to the according language; make sure to preserve the key before the = -sign and make sure to not accidentally delete any key as otherwise the experiment may crash. Contributing Translations # If you would like your translation to be available to other users, please create a pull request or an issue on the GitHub repository with the translated instructions. For a guide on how to do this, see here .","title":"Instructions and Languages"},{"location":"howto/translations/#translating-experiments","text":"If you would like to use experiments in a different language or change the display messages, look at the i18n.conf file distributed with each experiment. Each block denoted by square brackets corresponds to one language, the [en] block has English instructions and is the default. If you would like to change the language of your experiment, please make sure the language is available in the i18n.conf and adjust the language = value in the [GENERAL] section of the configuration file config.conf to the name of that block (e.g. language = en for English).","title":"Translating Experiments"},{"location":"howto/translations/#changing-instructions","text":"In case you would like to change any instructions, make sure to preserve the message keys (i.e. the part before the = -sign) and only change what is written afterwards. If you would like to add an instruction where there is currently none, please add an issue on GitHub; if you would like to remove an instruction completely, please use the value SKIP (e.g. thanks = SKIP ) but do not delete it.","title":"Changing Instructions"},{"location":"howto/translations/#adding-a-translation","text":"To add a translation to an existing experiment, please copy the whole [en] -section in i18n.conf within the same file, and change the block name in brackets to the language code of your translation. Then you can translate all items to the according language; make sure to preserve the key before the = -sign and make sure to not accidentally delete any key as otherwise the experiment may crash.","title":"Adding a Translation"},{"location":"howto/translations/#contributing-translations","text":"If you would like your translation to be available to other users, please create a pull request or an issue on the GitHub repository with the translated instructions. For a guide on how to do this, see here .","title":"Contributing Translations"},{"location":"tasks/digitspan/","text":"Digit-Span Task # A classic digit-span task for expyriment. Configuration # The experiment can be configured in the config.conf file distributed alongside the task. For the configuration of the [GENERAL] block see Configuration . Experiment Design # The experiment design is covered in the [DESIGN] section of the configuration file. The required configuration for experiment design covers the amount of blocks as well as the amount of trials per block. For example: [DESIGN] blocks = 1 trials = 10 Optional arguments are described below with their default values: # the length of the starting sequence as a whole number starting_length = 4 # the type of the sequence to be displayed; # one of numeric, alphabetic, or ALPHABETIC sequence_type = numeric # whether or not to ask the participant to # repeat the sequence in reversed order (yes/no) reverse = no # the duration of stimulus display in ms duration_display = 800 # the break between two stimuli in ms duration_break = 200 Appearance # The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. [APPEARANCE] # offset of the displayed numbers and the input box; # the first value is x offset, the second value y offset offset = (0, 0) # the colour of the stimulus in RGB values stimulus_colour = (255, 255, 255) # scale of the stimulus compared to normal text stimulus_text_size_scale = 6 # scale of the input filed compared to normal text input_text_size_scale = 3 Logging the Experiment # What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . The available fields that can be logged are as follows: settings, resembling the input to the experiment: reverse , starting_length , computed data per trial: sequence , sequence_length the user response: user_input analyses of the user response 1 : correct : can be True, False total_match : the amount of matching digits/characters longest_match : the longest continuous match initial_match_answer : the number of correct digits/characters at the beginning of the answer initial_match_sequence : the number of correctly reproduced digits/characters at the beginning of the given sequence similarity : a similarity score calculated as 2 * M / T with M = number of matching digits/characters and T = length of the answer + length of the presented sequence Example # A screencast of the first few trials of a Digit Span Task with standard configuration. Note that all values apart from whether a sequence is correct are computed using the python difflib; please consult its documentation for any queries on how these values come into place. \u21a9","title":"Digit Span Task"},{"location":"tasks/digitspan/#digit-span-task","text":"A classic digit-span task for expyriment.","title":"Digit-Span Task"},{"location":"tasks/digitspan/#configuration","text":"The experiment can be configured in the config.conf file distributed alongside the task. For the configuration of the [GENERAL] block see Configuration .","title":"Configuration"},{"location":"tasks/digitspan/#experiment-design","text":"The experiment design is covered in the [DESIGN] section of the configuration file. The required configuration for experiment design covers the amount of blocks as well as the amount of trials per block. For example: [DESIGN] blocks = 1 trials = 10 Optional arguments are described below with their default values: # the length of the starting sequence as a whole number starting_length = 4 # the type of the sequence to be displayed; # one of numeric, alphabetic, or ALPHABETIC sequence_type = numeric # whether or not to ask the participant to # repeat the sequence in reversed order (yes/no) reverse = no # the duration of stimulus display in ms duration_display = 800 # the break between two stimuli in ms duration_break = 200","title":"Experiment Design"},{"location":"tasks/digitspan/#appearance","text":"The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. [APPEARANCE] # offset of the displayed numbers and the input box; # the first value is x offset, the second value y offset offset = (0, 0) # the colour of the stimulus in RGB values stimulus_colour = (255, 255, 255) # scale of the stimulus compared to normal text stimulus_text_size_scale = 6 # scale of the input filed compared to normal text input_text_size_scale = 3","title":"Appearance"},{"location":"tasks/digitspan/#logging-the-experiment","text":"What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . The available fields that can be logged are as follows: settings, resembling the input to the experiment: reverse , starting_length , computed data per trial: sequence , sequence_length the user response: user_input analyses of the user response 1 : correct : can be True, False total_match : the amount of matching digits/characters longest_match : the longest continuous match initial_match_answer : the number of correct digits/characters at the beginning of the answer initial_match_sequence : the number of correctly reproduced digits/characters at the beginning of the given sequence similarity : a similarity score calculated as 2 * M / T with M = number of matching digits/characters and T = length of the answer + length of the presented sequence","title":"Logging the Experiment"},{"location":"tasks/digitspan/#example","text":"A screencast of the first few trials of a Digit Span Task with standard configuration. Note that all values apart from whether a sequence is correct are computed using the python difflib; please consult its documentation for any queries on how these values come into place. \u21a9","title":"Example"},{"location":"tasks/nback/","text":"N-Back Task # An N-Back task for expyriment. Configuration # Experiment Design # The experiment design is covered in the [DESIGN] section of the config file. [DESIGN] ## number of blocks blocks = 3 ## all of the following values can be one of these values to ## repeat for all blocks, or as many values as there ## are blocks and separated by commas; in case of two blocks: ## e.g. target_titles = 123 OR target_titles = 123, abc ## three values for two blocks or vice versa causes an error ## amount of trials (i.e. trails to make per block) trials = 20 ## default numbers of trials to look back at nback = 2 ## default mode, string with any one or more of PC ## P = Position ## C = Colour nback_mode = PC ## probability of having one characteristic repeated repeat_probability = 0.3 ## after here everything is universal for all blocks again ## number of boxes in the grid; they will be arranged in a ## square, so a square number is advantageous num_boxes = 9 ## colours to vary, can be any of: black, blue, darkgrey, ## expyriment_orange, expyriment_purple, green, grey, red, ## white, yellow, cyan, magenta or RGB colour codes such as ## (255, 0, 0) for red, separated by commas colours = magenta, green, cyan ## the duration of stimuli display [ms] display_duration = 3000 ## min and max duration of the break in between to stimuli [ms] break_duration = 500, 2000 Optional values and their default values are: ## indicate whether or not to change the NBack level change_nback_level = no ## lower threshold of the ratio of trials that have to be ## correct, after which the NBack level is increased ## (checked as bigger or equal than) increase_nback_correct_ratio = 0.8 ## upper threshold of the ratio of trials that have to be ## correct, after which the NBack level is decreased ## (checked as smaller than) decrease_nback_correct_ratio = 0.5 Appearance # The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. [APPEARANCE] ## size of the grid relative to smallest screen dimension ## the button_height will be reduced on either side of the ## screen so it is centred canvas_size = 0.9 ## line width for the grid to be drawn grid_line_width = 1mm ## set antialiasing so that things appear a bit sharper antialiasing = True ## the colour of grid and fixation cross colour_grid = (255, 255, 255) colour_fixation_cross = None ## the height of the buttons to be pressed; ## the width will be based on the screen width divided by the ## amount of labels button_height = 20mm ## background, border, and text colour of the button button_background_colour = (0, 0, 0) button_border_colour = (80, 80, 80) button_text_colour = white ## the button is highlighted when pressed; this defines the ## highlighting colour (for the inner edges) ## as well as the duration [ms] button_highlight_colour = (255, 255, 255) button_highlight_duration = 50 Logging the Experiment # What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . The available fields that can be logged are as follows: settings for the block: nback , nback_mode , trials , repeat_probability computed data per trial: P (position of the stimulus), C (colour of the stimulus), wait (time before stimulus is shown), repeat (whether and which a component is repeated) the user response: rt (reaction time), pressed_any (0/1, whether any button was pressed), pressed (which button was pressed) analyses of the user response: correct (0/1), incorrect (0/1) correct_repeat (0/1, whether a repeat trial was correctly identified) falsebutton (0/1, whether a false button was pressed) missedpositive (0/1, whether a repeat trial was missed) falsepositive (0/1, whether a button was pressed although it should not have been) Example # A screencast of the N-Back Task with standard settings and 5 trials.","title":"N-Back"},{"location":"tasks/nback/#n-back-task","text":"An N-Back task for expyriment.","title":"N-Back Task"},{"location":"tasks/nback/#configuration","text":"","title":"Configuration"},{"location":"tasks/nback/#experiment-design","text":"The experiment design is covered in the [DESIGN] section of the config file. [DESIGN] ## number of blocks blocks = 3 ## all of the following values can be one of these values to ## repeat for all blocks, or as many values as there ## are blocks and separated by commas; in case of two blocks: ## e.g. target_titles = 123 OR target_titles = 123, abc ## three values for two blocks or vice versa causes an error ## amount of trials (i.e. trails to make per block) trials = 20 ## default numbers of trials to look back at nback = 2 ## default mode, string with any one or more of PC ## P = Position ## C = Colour nback_mode = PC ## probability of having one characteristic repeated repeat_probability = 0.3 ## after here everything is universal for all blocks again ## number of boxes in the grid; they will be arranged in a ## square, so a square number is advantageous num_boxes = 9 ## colours to vary, can be any of: black, blue, darkgrey, ## expyriment_orange, expyriment_purple, green, grey, red, ## white, yellow, cyan, magenta or RGB colour codes such as ## (255, 0, 0) for red, separated by commas colours = magenta, green, cyan ## the duration of stimuli display [ms] display_duration = 3000 ## min and max duration of the break in between to stimuli [ms] break_duration = 500, 2000 Optional values and their default values are: ## indicate whether or not to change the NBack level change_nback_level = no ## lower threshold of the ratio of trials that have to be ## correct, after which the NBack level is increased ## (checked as bigger or equal than) increase_nback_correct_ratio = 0.8 ## upper threshold of the ratio of trials that have to be ## correct, after which the NBack level is decreased ## (checked as smaller than) decrease_nback_correct_ratio = 0.5","title":"Experiment Design"},{"location":"tasks/nback/#appearance","text":"The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. [APPEARANCE] ## size of the grid relative to smallest screen dimension ## the button_height will be reduced on either side of the ## screen so it is centred canvas_size = 0.9 ## line width for the grid to be drawn grid_line_width = 1mm ## set antialiasing so that things appear a bit sharper antialiasing = True ## the colour of grid and fixation cross colour_grid = (255, 255, 255) colour_fixation_cross = None ## the height of the buttons to be pressed; ## the width will be based on the screen width divided by the ## amount of labels button_height = 20mm ## background, border, and text colour of the button button_background_colour = (0, 0, 0) button_border_colour = (80, 80, 80) button_text_colour = white ## the button is highlighted when pressed; this defines the ## highlighting colour (for the inner edges) ## as well as the duration [ms] button_highlight_colour = (255, 255, 255) button_highlight_duration = 50","title":"Appearance"},{"location":"tasks/nback/#logging-the-experiment","text":"What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . The available fields that can be logged are as follows: settings for the block: nback , nback_mode , trials , repeat_probability computed data per trial: P (position of the stimulus), C (colour of the stimulus), wait (time before stimulus is shown), repeat (whether and which a component is repeated) the user response: rt (reaction time), pressed_any (0/1, whether any button was pressed), pressed (which button was pressed) analyses of the user response: correct (0/1), incorrect (0/1) correct_repeat (0/1, whether a repeat trial was correctly identified) falsebutton (0/1, whether a false button was pressed) missedpositive (0/1, whether a repeat trial was missed) falsepositive (0/1, whether a button was pressed although it should not have been)","title":"Logging the Experiment"},{"location":"tasks/nback/#example","text":"A screencast of the N-Back Task with standard settings and 5 trials.","title":"Example"},{"location":"tasks/rt_simple/","text":"A Simple Reaction Time Task # This reaction time task uses the same script as the N-Back-task but builds on a different configuration; essentially, it is a 0-Back task where only one stimulus colour is used. While these items can be modified, it is advised not to do so. Configuration # All configuration options are essentially like those for the N-Back task. Main differences or modifications are listed here. [DESIGN] ## enable the reaction time mode ## note that nback and nback_mode are obselete through this ## setting, and repeat_probability is defaulted to 1 reaction_time_only = yes . . . ## probability of having one characteristic repeated ## default to one, but it is advised to change this to 0 ## if the layout covers more than one box (see below) # repeat_probability = 1 . . . ## number of boxes in the grid; they will be arranged in a ## square, so a square number is advantageous; ## for the reaction time task, one is advised, so that the ## stimulus is always centred num_boxes = 1 ## colour of the stimuli ## for the reaction time task only one colour should be chosen colours = (255, 255, 0) In the [APPEARANCE] section, the following settings are suggested for a nice reaction time task. [APPEARANCE] ## size of the grid relative to smallest screen dimension ## the button_height will be reduced on either side of the ## screen so it is centred canvas_size = 0.2 ## the colour of grid and fixation cross ## for the reaction time task it is advised to remove the grid ## and only display the fixation cross colour_grid = none colour_fixation_cross = (255, 255, 255) Logging the Experiment # What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . Although all fields available for the N-Back task are avaialable here, the sensitive values are as follows: settings for the block: trials computed data per trial: wait (time before stimulus is shown) the user response: rt (reaction time), pressed (whether a button was pressed) Modifications # Moving Stimulus # To move the stimulus around, it suffices to change the following options. [DESIGN] ## set the probability to zero so it always jumps repeat_probability = 0 ## increase the number of boxes; this experiment works best with ## square numbers num_boxes = 49 [APPEARANCE] ## increase the canvas size so that the stimulus can use the ## whole screen canvas_size = 0.9 Example # A screencast of the Reaction Time Task. Simple, as it is supposed to be.","title":"Simple Reaction Time Task"},{"location":"tasks/rt_simple/#a-simple-reaction-time-task","text":"This reaction time task uses the same script as the N-Back-task but builds on a different configuration; essentially, it is a 0-Back task where only one stimulus colour is used. While these items can be modified, it is advised not to do so.","title":"A Simple Reaction Time Task"},{"location":"tasks/rt_simple/#configuration","text":"All configuration options are essentially like those for the N-Back task. Main differences or modifications are listed here. [DESIGN] ## enable the reaction time mode ## note that nback and nback_mode are obselete through this ## setting, and repeat_probability is defaulted to 1 reaction_time_only = yes . . . ## probability of having one characteristic repeated ## default to one, but it is advised to change this to 0 ## if the layout covers more than one box (see below) # repeat_probability = 1 . . . ## number of boxes in the grid; they will be arranged in a ## square, so a square number is advantageous; ## for the reaction time task, one is advised, so that the ## stimulus is always centred num_boxes = 1 ## colour of the stimuli ## for the reaction time task only one colour should be chosen colours = (255, 255, 0) In the [APPEARANCE] section, the following settings are suggested for a nice reaction time task. [APPEARANCE] ## size of the grid relative to smallest screen dimension ## the button_height will be reduced on either side of the ## screen so it is centred canvas_size = 0.2 ## the colour of grid and fixation cross ## for the reaction time task it is advised to remove the grid ## and only display the fixation cross colour_grid = none colour_fixation_cross = (255, 255, 255)","title":"Configuration"},{"location":"tasks/rt_simple/#logging-the-experiment","text":"What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . Although all fields available for the N-Back task are avaialable here, the sensitive values are as follows: settings for the block: trials computed data per trial: wait (time before stimulus is shown) the user response: rt (reaction time), pressed (whether a button was pressed)","title":"Logging the Experiment"},{"location":"tasks/rt_simple/#modifications","text":"","title":"Modifications"},{"location":"tasks/rt_simple/#moving-stimulus","text":"To move the stimulus around, it suffices to change the following options. [DESIGN] ## set the probability to zero so it always jumps repeat_probability = 0 ## increase the number of boxes; this experiment works best with ## square numbers num_boxes = 49 [APPEARANCE] ## increase the canvas size so that the stimulus can use the ## whole screen canvas_size = 0.9","title":"Moving Stimulus"},{"location":"tasks/rt_simple/#example","text":"A screencast of the Reaction Time Task. Simple, as it is supposed to be.","title":"Example"},{"location":"tasks/trailmaking/","text":"Trail-Making Task # A trail-making task for expyriment. Configuration # The experiment can be configured in the config.conf file distributed alongside the task. For the configuration of the [GENERAL] block see Configuration . Particularly on android devices it might be advisable to change the window_size as this task is very computing intensive and might lag otherwise, as described in the link. Experiment Design # The experiment design is covered in the [DESIGN] section of the configuration file. The required configuration for experiment design covers the amount of blocks as well as the amount of trials per block. For example: [DESIGN] blocks = 3 ## all of the following values can be one of these values to ## repeat for all blocks, or as many values as there ## are blocks and separated by commas; in case of two blocks: ## e.g. target_titles = 123 OR target_titles = 123, abc ## three values for two blocks or vice versa causes an error ## amount of trials (i.e. trails to make per block) trials = 1 ## default amount of targets per trial num_targets = 10, 20, 30 ## the labels of targets, the values below are possible, and ## continued as is to be expected; note that '1a2' is alternating ## numbers and the alphabet, whereas '1b2' is skipping labels ## maximum number of targets are 26 for 'abc', '1b2', and 'a2c', ## 52 for '1a2', 'a1b', etc, and 99 for '123' ## one of: 123, abc, 1a2, a1b, A1B, 1A2, 1b2, a2c target_titles = 123, 1a2, 1a2 ## timeout for the task in seconds; when this time was reached ## this the task will be ended automatically timeout = 100, 200, 300 Optional parameters and their default values: ## how to handle when the screen is not touched anymore ## reset : remove all lines drawn and start with the first ## circle again, while time is continued [default] ## nothing : nothing happens on_pointer_release = reset ## how to handle a wrong circle ## repeat_last : participants needs to touch the last completed ## circle again, score decreases [default] ## highlight_only : wrong circle is highlighted, score ## decreases, target stays as before on_mismatched_circle = repeat_last Appearance # The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. ## units for the following two options can be mm, cm, in, ## or no unit for pixels ## the radius of circles target_radius = 5mm ## line width for drawing line_width = 1.5mm ## size of text on a target relative to its radius stimulus_relative_text_size = 1.5 ## baseline correction of the text in the circles relative ## to radius. this depends on text size and font, and corrects ## for the non-existent part of text below the line stimulus_text_correction_y = 0.2 ## font of the text in the circle, None for Standard font, ## otherwise a font name without spaces, e.g. 'timesnewroman', ## 'arial', 'courier', or 'console'. this will affect the ## size of the text even though font size remains constant target_font = sans ## minimum distance between circles in multiple of radius; ## 2 means the closest they can get is touching each other ## too high values mean that circles will be almost presented ## in a grid-like way with high target numbers, whereas low ## values can mean clustering the exact values when this occurs ## depend on the screen size min_distance_of_targets = 4 ## if the minimum distance is too high and circles are too big ## the program will stall. this setting aborts the positioning ## after the amount of attempts specified to place a circle in ## the existing surroundings. it then reduces the minimum ## distance requirement by .05 of the target radius attempts_before_reducing_min_distance = 200 #### COLOURS ## Colours are presented in RGB format ## colour of the drawn line colour_line = 0, 255, 0 ## colour of targets colour_target = 255, 255, 0 ## colour of text on tagets colour_target_label = 0, 0, 0 ## colour of any circle touched in the right order colour_target_done = 0, 255, 0 ## colour of any circle touched wrongly colour_target_error = 255, 0, 0 ## colour of the circle to go back to colour_target_hint = 0, 255, 0 ## colour of the window boundary, None for no boundary ## this is helpful if the resolution you choose does not match ## the screen resolution on an android device colour_window_boundary = None ## anti aliasing is about whether to smoothen edges; unused ## in the android app and other setups running expyriment 0.7.0 ## as it does not support antialiasing for circles antialiasing = yes Logging the Experiment # What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . Note that in the log, every event in the trail making task is logged, which is one of correct_touch if a target was correctly connected to the trail wrong_touch if a wrong target was connected to the trail; note that this is logged as wrong_touch:15 if the circle 15 (not the circle with label 15!) was connected lost_touch if the user released the finger from the screen (touchpad) or stopped holding the mouse button pressed (desktop) timeout if the user faced a timeout finish if the last target was connected to the trail The available fields that can be logged are as follows: settings, resembling the input to the experiment: timeout , num_targets , target_titles tracking of the user response: event : any of the events as described above distance : distance travelled so far time : time taken so far current_target : the target number that needed to be connected when that event happened The block summary for the trail making task is logged after making a trail was finished; in case you set trials to anything higher than 1, multiple trails will be summarised here. The following convenience fields are available to this summary: time : time in ms taken to complete the task; in case of a timeout it should be equal or bigger than the timeout distance : the distance travelled in pixel; this includes deleted paths and those that were reset through lost touch num_lost_touch : amount of times the user lost touch with the screen num_wrong_targets : the number of times a wrong target was connected to the trail num_done_targets : the highest target number that could be connected; should be identical to num_targets unless a timeout occurred min_distance : the minimum distance necessary to connect all items if connected by straight lines ratio_min_distance : the distance travelled divided by the minimum distance lost_touch : list of events when the user lost touch (see above; note that printing this will print a list of python dictionaries to the output) touched_targets : list of events when a target was touched (note that printing this will print a list of python dictionaries to the output) These further items can be aggregated in the experiment summary if required. Example # A screencast of a trail-making task with standard settings, 20 targets and the order 1-A-2-B-3-C-\u2026","title":"Trail Making Task"},{"location":"tasks/trailmaking/#trail-making-task","text":"A trail-making task for expyriment.","title":"Trail-Making Task"},{"location":"tasks/trailmaking/#configuration","text":"The experiment can be configured in the config.conf file distributed alongside the task. For the configuration of the [GENERAL] block see Configuration . Particularly on android devices it might be advisable to change the window_size as this task is very computing intensive and might lag otherwise, as described in the link.","title":"Configuration"},{"location":"tasks/trailmaking/#experiment-design","text":"The experiment design is covered in the [DESIGN] section of the configuration file. The required configuration for experiment design covers the amount of blocks as well as the amount of trials per block. For example: [DESIGN] blocks = 3 ## all of the following values can be one of these values to ## repeat for all blocks, or as many values as there ## are blocks and separated by commas; in case of two blocks: ## e.g. target_titles = 123 OR target_titles = 123, abc ## three values for two blocks or vice versa causes an error ## amount of trials (i.e. trails to make per block) trials = 1 ## default amount of targets per trial num_targets = 10, 20, 30 ## the labels of targets, the values below are possible, and ## continued as is to be expected; note that '1a2' is alternating ## numbers and the alphabet, whereas '1b2' is skipping labels ## maximum number of targets are 26 for 'abc', '1b2', and 'a2c', ## 52 for '1a2', 'a1b', etc, and 99 for '123' ## one of: 123, abc, 1a2, a1b, A1B, 1A2, 1b2, a2c target_titles = 123, 1a2, 1a2 ## timeout for the task in seconds; when this time was reached ## this the task will be ended automatically timeout = 100, 200, 300 Optional parameters and their default values: ## how to handle when the screen is not touched anymore ## reset : remove all lines drawn and start with the first ## circle again, while time is continued [default] ## nothing : nothing happens on_pointer_release = reset ## how to handle a wrong circle ## repeat_last : participants needs to touch the last completed ## circle again, score decreases [default] ## highlight_only : wrong circle is highlighted, score ## decreases, target stays as before on_mismatched_circle = repeat_last","title":"Experiment Design"},{"location":"tasks/trailmaking/#appearance","text":"The experiment appearance is covered in the [APPEARANCE] section of the configuration file; there are no required arguments. In the following, the default options are listed. ## units for the following two options can be mm, cm, in, ## or no unit for pixels ## the radius of circles target_radius = 5mm ## line width for drawing line_width = 1.5mm ## size of text on a target relative to its radius stimulus_relative_text_size = 1.5 ## baseline correction of the text in the circles relative ## to radius. this depends on text size and font, and corrects ## for the non-existent part of text below the line stimulus_text_correction_y = 0.2 ## font of the text in the circle, None for Standard font, ## otherwise a font name without spaces, e.g. 'timesnewroman', ## 'arial', 'courier', or 'console'. this will affect the ## size of the text even though font size remains constant target_font = sans ## minimum distance between circles in multiple of radius; ## 2 means the closest they can get is touching each other ## too high values mean that circles will be almost presented ## in a grid-like way with high target numbers, whereas low ## values can mean clustering the exact values when this occurs ## depend on the screen size min_distance_of_targets = 4 ## if the minimum distance is too high and circles are too big ## the program will stall. this setting aborts the positioning ## after the amount of attempts specified to place a circle in ## the existing surroundings. it then reduces the minimum ## distance requirement by .05 of the target radius attempts_before_reducing_min_distance = 200 #### COLOURS ## Colours are presented in RGB format ## colour of the drawn line colour_line = 0, 255, 0 ## colour of targets colour_target = 255, 255, 0 ## colour of text on tagets colour_target_label = 0, 0, 0 ## colour of any circle touched in the right order colour_target_done = 0, 255, 0 ## colour of any circle touched wrongly colour_target_error = 255, 0, 0 ## colour of the circle to go back to colour_target_hint = 0, 255, 0 ## colour of the window boundary, None for no boundary ## this is helpful if the resolution you choose does not match ## the screen resolution on an android device colour_window_boundary = None ## anti aliasing is about whether to smoothen edges; unused ## in the android app and other setups running expyriment 0.7.0 ## as it does not support antialiasing for circles antialiasing = yes","title":"Appearance"},{"location":"tasks/trailmaking/#logging-the-experiment","text":"What should be logged is described in the [LOG] section of the configuration file. For a general overview on their configuration, see here . Note that in the log, every event in the trail making task is logged, which is one of correct_touch if a target was correctly connected to the trail wrong_touch if a wrong target was connected to the trail; note that this is logged as wrong_touch:15 if the circle 15 (not the circle with label 15!) was connected lost_touch if the user released the finger from the screen (touchpad) or stopped holding the mouse button pressed (desktop) timeout if the user faced a timeout finish if the last target was connected to the trail The available fields that can be logged are as follows: settings, resembling the input to the experiment: timeout , num_targets , target_titles tracking of the user response: event : any of the events as described above distance : distance travelled so far time : time taken so far current_target : the target number that needed to be connected when that event happened The block summary for the trail making task is logged after making a trail was finished; in case you set trials to anything higher than 1, multiple trails will be summarised here. The following convenience fields are available to this summary: time : time in ms taken to complete the task; in case of a timeout it should be equal or bigger than the timeout distance : the distance travelled in pixel; this includes deleted paths and those that were reset through lost touch num_lost_touch : amount of times the user lost touch with the screen num_wrong_targets : the number of times a wrong target was connected to the trail num_done_targets : the highest target number that could be connected; should be identical to num_targets unless a timeout occurred min_distance : the minimum distance necessary to connect all items if connected by straight lines ratio_min_distance : the distance travelled divided by the minimum distance lost_touch : list of events when the user lost touch (see above; note that printing this will print a list of python dictionaries to the output) touched_targets : list of events when a target was touched (note that printing this will print a list of python dictionaries to the output) These further items can be aggregated in the experiment summary if required.","title":"Logging the Experiment"},{"location":"tasks/trailmaking/#example","text":"A screencast of a trail-making task with standard settings, 20 targets and the order 1-A-2-B-3-C-\u2026","title":"Example"}]}